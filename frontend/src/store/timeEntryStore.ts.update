// Reemplazar la función fetchTimeEntries con esta versión mejorada
fetchTimeEntries: async (projectId, taskId, startDate, endDate) => {
  console.log('timeEntryStore.fetchTimeEntries called with', {
    projectId,
    taskId,
    startDate,
    endDate,
  });
  try {
    set({ isLoading: true, error: null });

    // Añadir horas a las fechas si no las tienen
    let formattedStartDate = startDate;
    let formattedEndDate = endDate;
    
    if (startDate && !(startDate instanceof Date && isNaN(startDate.getTime()))) {
      if (typeof startDate === 'string' && !startDate.includes('T')) {
        formattedStartDate = new Date(startDate + 'T00:00:00');
      }
    }
    
    if (endDate && !(endDate instanceof Date && isNaN(endDate.getTime()))) {
      if (typeof endDate === 'string' && !endDate.includes('T')) {
        formattedEndDate = new Date(endDate + 'T23:59:59.999');
      }
    }

    const timeEntries = await timeEntryService.getTimeEntries(
      projectId,
      taskId,
      formattedStartDate,
      formattedEndDate
    );

    console.log('timeEntryStore: received time entries:', timeEntries.length);
    set({ timeEntries, isLoading: false });
    return timeEntries;
  } catch (error: any) {
    console.error('timeEntryStore.fetchTimeEntries error:', error);
    set({
      error: error.message || 'Failed to fetch time entries',
      isLoading: false,
    });
    return [];
  }
}
